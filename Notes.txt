git config --global user.email "email@example.com"

ng new soc-gen-app
ng serve

-- Platform Browser Dynamic to load the app module
-- Decorators @NgModule, @Component, @Injectable, @Directive, @Pipe
-- NgModule
	-- declarations (components, pipes, directives)
	-- imports (modules)
	-- providers (services)
	-- bootstrap (root components of the application)

-- generate new components, modules, services, pipes, directives
	ng g c <component name>
	ng g s <service name>
	ng g d <directive name>
	ng g m <module name>
	ng g p <pipe name>

-- Data bindings
	-- Property binding
	-- Event binding
	-- two way data binding with interpolation / forms module

-- Data from Parent to Child
	-- Data Projection
		-- <ng-content> with html element selector
		-- <ng-content> with select (node name/css class) 
	-- @Input() + Property binding
	-- Using Services
	-- Using Objects

-- Component Types
	-- Smart Component
	-- Dump Component


-- Course Practices
https://www.intertech.com/training/web-dev/angular/angular-5/advanced-angular-5-programming
https://medium.mybridge.co/angular-top-10-articles-for-the-past-month-v-nov-2017-7447fd2f03ea
https://github.com/synergy2411/sg3-demo/blob/master/ngcourse2.pdf

-- Directives
	-- Component Directive
		-- will have template 
		-- styles (optional)
		-- business logic attached (optional)
	-- Attribute Directive
		-- ngClass
		-- ngStyle
	-- Structural Directive
		-- ngFor
		-- ngIf
		-- ngSwitch

-- Custom Directives
	-- ElementRef class for referencing the target element of the directive
	-- Initializing input decorators from component(sending data from component to directive)
		-- @HostListener decorator for the methods in the directive
		-- @HostBinding decorator for binding the property directly on the target element

-- Pipes
	-- Stateless/Pure Pipe
		-- Currency, Date, Uppercase, Lowercase, Number, JSON, Percent
	-- Impure Pipe
		-- Async
-- Custom Pipe
-- Pure pipes do not trigger digest cycle for any change in the model object
	-- can be made as impure pipe by setting (pure = false) in the pipe
-- Impure pipes trigger digest cycle for change in model object
	
-- Forms 
	-- Template Driven Forms (represented by ngForm keyword)
		-- keeps validation logic inside template
		-- refers to Form object
	-- Model Driven Forms
		-- Form is created programmatically and syns with DOM
		-- Business logic lies in component
		-- FormControl, FormGroup, FormBuilder
			-- FormBuilder builds/groups the FormControl to FormGroup 


-- Services
	-- Services are singleton
	-- Have heirarchical injection
	-- Injecting in root module will have single instance throught the application
	-- Injecting inside a specific component will restrict the scope of the service to that component

-- Http Module
-- HttpClient Module
-- rxjs Reactive 
	http://reactivex.io
	https://angular.io/resources